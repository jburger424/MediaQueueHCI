diff --git a/data.sqlite b/data.sqlite
index 4d7be80..60260ae 100755
Binary files a/data.sqlite and b/data.sqlite differ
diff --git a/flaskapp.py b/flaskapp.py
index b2a7d8a..db4b9e7 100644
--- a/flaskapp.py
+++ b/flaskapp.py
@@ -173,7 +173,7 @@ class Playable(db.Model):
     session_id = db.Column(db.Integer, db.ForeignKey('session.id'))
     added_by_id = db.Column(db.Integer, db.ForeignKey('user.id'))
     score = db.Column(db.Integer(), unique=False)
-    time_added = db.Column(db.DateTime())
+    time_modified = db.Column(db.DateTime())
 
     def __repr__(self):
         return '<Playable %r>' % self.url
@@ -301,8 +301,8 @@ def addPlayable():
                         added_by_id = current_user.id,
                         score = 0
                         )
-    playable.time_added = datetime.utcnow()
-    print(playable.time_added)
+    playable.time_modified = datetime.utcnow()
+    print(playable.time_modified)
     db.session.add(playable)
     db.session.commit()
     newPlayableID = Playable.query.filter_by(url=newPlayable).first().id
@@ -317,7 +317,7 @@ def getUpdate():
     try:
         playables=Playable.query.filter(
             current_user.session_id == Playable.session_id,
-            current_user.time_updated < Playable.time_added
+            current_user.time_updated < Playable.time_modified
         )
     except:
         print("Unexpected Playable error:", sys.exc_info()[0])
@@ -337,6 +337,22 @@ def getUpdate():
 
     return Response(json.dumps(dict), mimetype='application/json')
 
+@app.route('/session/vote', methods=['POST'])
+def vote():
+    jsonData = request.json
+    url = jsonData.get('url')
+    vote = jsonData.get('vote')
+    playable = Playable.query.filter(
+            current_user.session_id == Playable.session_id,
+            Playable.url == url
+    ).first()
+    print("Old Score: "+str(playable.score))
+    playable.score += vote
+    print("New Score: "+ str(playable.score))
+    playable.time_modified = datetime.utcnow()
+    # send back success message to js with new tag ID
+    return json.dumps({'success': True, 'new_score': playable.score}), 200, {'ContentType': 'application/json'}
+
 '''
 ##todo, check that email is unique
 emailCheck = User.query.filter_by(email=email).first()
diff --git a/static/js.js b/static/js.js
index 46464ae..e541b09 100644
--- a/static/js.js
+++ b/static/js.js
@@ -1,6 +1,6 @@
 jQuery(function ($) { // First argument is the jQuery object
-    var vWidth = $(".add-link.input-group").width();
-    var vHeight = vWidth * (9 / 16);
+    //var vWidth = $(".add-link.input-group").width();
+    //var vHeight = vWidth * (9 / 16);
     $('#url_form').submit(function (event) {
         event.preventDefault();
         var url = $('.add-link .form-control').val();
@@ -17,19 +17,30 @@ jQuery(function ($) { // First argument is the jQuery object
             },
             dataType: "json"
         });
+        setTimeout(function () {
+            update();
+        }, 200);
+
+        $(".add-link input.form-control").val("");
+    });
+    $("#playables li").on('click', '.upvote,.downvote', function () {
+        //$('#playables li.list-group-item .upvote, #playables li.list-group-item .downvote').click(function () {
+        var url = $(this).siblings(".title").first().text();
+        var voteVal = $(this).hasClass("upvote") ? 1 : -1;
+
+        $.ajax({
+            type: "POST",
+            contentType: "application/json; charset=utf-8",
+            url: "/session/vote",
+            data: JSON.stringify({url: url, vote: voteVal}),
+            success: function (data) {
+                //console.log(data.title);
+                //console.log(data.article);
+            },
+            dataType: "json"
+        });
         update();
-        $(".add-link input.form-control").val("")
-        /*$.ajax({
-         url: '/session/585/add',
-         data: $('form').serialize(),
-         type: 'POST',
-         success: function (response) {
-         console.log(response);
-         },
-         error: function (error) {
-         console.log(error);
-         }
-         });*/
+        sort($(this).parent("li"));
     });
     function update() {
         $.ajax({
@@ -39,11 +50,29 @@ jQuery(function ($) { // First argument is the jQuery object
             success: function (data) {
                 var users = data['users'];
                 var playables = data['playables'];
-                console.log(users);
-                console.log(playables);
+                //console.log(users);
+                //console.log(playables);
                 for (var i in playables) {
-                    $("#playables").append("<li>" + playables[i]['URL'] + "</li>");
-                    console.log("Adding: " + playables[i]['URL']);
+                    var url = playables[i]['URL'];
+                    var score = playables[i]['Score'];
+
+                    //sees if this url already exists in list
+                    var listItem = $("li.list-group-item[data-url='" + url + "']");
+                    if (!listItem.length) {
+                        $("#playables").append("<li class='list-group-item data-url='" +
+                            playables[i]['URL'] + "'>" +
+                            "<span class='upvote'>&#x25B2;</span>" +
+                            "<span class='downvote'>&#x25BC;</span>" +
+                            "<span class='title'>" + playables[i]['URL'] + "</span>" +
+                            "<span class='score label label-default label-pill pull-xs-right'>" + (playables[i]['Score']).toString() + "</span>" +
+                            "</li>"
+                        );
+                    }
+                    else {
+                        listItem.find(".score").text(score);
+                    }
+
+                    console.log("Adding: " + playables[i]['URL'] + " with score" + playables[i]['Score']);
                 }
                 for (var j in users) {
                     $("#users").append("<li>" + users[j]['Name'] + "</li>");
@@ -58,82 +87,185 @@ jQuery(function ($) { // First argument is the jQuery object
         update();
         //console.log("updating")
     }, 1000);
+    /*var check = function(){
+     if(condition){
+     // run when condition is met
+     }
+     else {
+     setTimeout(check, 1000); // check again in a second
+     }*/
+//}
 
-});
-function findBootstrapEnvironment() {
-    var envs = ['xs', 'sm', 'md', 'lg'];
 
-    var $el = $('<div>');
-    $el.appendTo($('body'));
+//});
+    function findBootstrapEnvironment() {
+        var envs = ['xs', 'sm', 'md', 'lg'];
 
-    for (var i = envs.length - 1; i >= 0; i--) {
-        var env = envs[i];
+        var $el = $('<div>');
+        $el.appendTo($('body'));
 
-        $el.addClass('hidden-' + env);
-        if ($el.is(':hidden')) {
-            $el.remove();
-            return env;
+        for (var i = envs.length - 1; i >= 0; i--) {
+            var env = envs[i];
+
+            $el.addClass('hidden-' + env);
+            if ($el.is(':hidden')) {
+                $el.remove();
+                return env;
+            }
         }
     }
-}
+
 //reordering animation http://zurb.com/forrst/posts/Animated_list_item_reordering_in_jQuery-RR1
-if (findBootstrapEnvironment() == "lg") {
-    $("#playables").on('click', 'li', function () {
-        //alert($(this).text());
-        $(this).addClass("active");
-        player.loadVideoById({
-            'videoId': $(this).text(),
-            'suggestedQuality': 'large'
-        });
+    if (findBootstrapEnvironment() == "lg") {
+        $("#playables").on('click', 'li', function () {
+            //alert($(this).text());
+            $(this).addClass("active");
+            player.loadVideoById({
+                'videoId': $(this).children(".title").text(),
+                'suggestedQuality': 'large'
+            });
 
-    });
-    var player;
-    var vWidth = $(".add-link.input-group").width();
-    var vHeight = vWidth * (9 / 16);
-
-    function onYouTubeIframeAPIReady() {
-        player = new YT.Player('player', {
-            height: vHeight,
-            width: vWidth,
-            videoId: 'Cy-sNutGsqg',
-            events: {
-                'onReady': onPlayerReady,
-                'onStateChange': onPlayerStateChange
-            }
         });
-    }
+        var player;
+        var vWidth = $(".add-link.input-group").width();
+        var vHeight = vWidth * (9 / 16);
+
+        function onYouTubeIframeAPIReady() {
+            console.log("something working");
+            player = new YT.Player('player', {
+                height: vHeight,
+                width: vWidth,
+                videoId: 'g4mHPeMGTJM',
+                events: {
+                    'onReady': onPlayerReady,
+                    'onStateChange': onPlayerStateChange
+                }
+            });
+        }
 
 // 4. The API will call this function when the video player is ready.
-    function onPlayerReady(event) {
-        event.target.playVideo();
-    }
+        function onPlayerReady(event) {
+            event.target.playVideo();
+        }
 
 // 5. The API calls this function when the player's state changes.
 //    The function indicates that when playing a video (state=1),
 //    the player should play for six seconds and then stop.
-    var done = false;
+        var done = false;
 
-    function onPlayerStateChange(event) {
-        if(event['data'] == 0){
-            console.log("video_ended");
-            goToNext();
+        function onPlayerStateChange(event) {
+            if (event['data'] == 0) {
+                console.log("video_ended");
+                goToNext();
+            }
         }
-    }
 
-    function stopVideo() {
-        player.stopVideo();
-    }
+        function stopVideo() {
+            player.stopVideo();
+        }
+
+        //start queue code
+        function goToNext() {
+            $("#playables li:first").remove();
+            $("#playables li:first").addClass("active");
+            player.loadVideoById({
+                'videoId': $("ul#playables li:first").find(".title").text(),
+                'suggestedQuality': 'large'
+            });
+        }
 
-    //start queue code
-    function goToNext() {
-        $("#playables li:first").remove();
-        $("#playables li:first").addClass("active");
-        player.loadVideoById({
-            'videoId': $("#playables li:first").text(),
-            'suggestedQuality': 'large'
+        /*Start Sliding Playables for voting*/
+        var allItems = $("ul li");
+        var numItems = allItems.length;
+        /*for(i=0; i<allItems.length; i++){
+         sort($(allItems[numItems-i+1]));
+         }*/
+
+        $("ul#playables").on("click", "li", function () {
+            console.log('clicked');
+            sort($(this));
+        });
+
+        $("button#sub_new_score").click(function () {
+            var newItem = $("ul").append("<li><span class='score'>" + $("input#new_score").val() + "</span></li>");
+            newItem.ready(sort($(this)));
         });
+
+        function sort(thisObj) {
+            var clicked = thisObj;
+            var clickedScore = parseInt($(clicked).find(".score").text(), 10);
+            console.log("Clicked Score:  " + clickedScore);
+            // all the LIs above the clicked one
+            var previousAll = clicked.prevAll();
+
+            // only proceed if it's not already on top (no previous siblings)
+            // top LI
+
+            //this is doing for each from bottom to top except for selected
+            var top;
+            var topScore = parseInt($("ul#playables li").first().find(".score").text(), 10);
+            if (clickedScore > topScore) {
+                top = $("ul#playables li").first();
+            }
+            else {
+                $("li").not(clicked.add(clicked.prev())).each(function () {
+                    var thisScore = parseInt($(this).find(".score").text(), 10);
+                    var nextScore = parseInt($(this).next().find(".score").text(), 10);
+                    console.log(thisScore, nextScore);
+                    //was or equal to
+                    if (nextScore < clickedScore && thisScore >= clickedScore && $(this) != clicked) {
+                        console.log("Move score " + clickedScore + " to before " + $(this).next().text());
+                        top = $(this).next().length ? $(this).next() : top;
+                    }
+                    else {
+                        console.log("Not Match: \n \tClicked Score: " + clickedScore + "\n\tThis Score: " + thisScore + "\n\tNext Score: " + nextScore + "\n\n")
+                    }
+                });
+
+
+            }
+
+            if (typeof top == 'undefined') {
+                console.log("No Swap Necessary");
+            }
+            else {
+                previousAll = top.index() < clicked.index() ? clicked.prevUntil(top.prev()) : previousAll = clicked.nextUntil(top);
+                var previous = $(previousAll[0]);
+
+                //if moving item up
+                var moveUp = top.index() < clicked.index() ? clicked.offset().top - top.offset().top : (top.offset().top - clicked.offset().top - clicked.outerHeight()) * -1;
+                var moveDown = (clicked.offset().top + clicked.outerHeight()) - (previous.offset().top + previous.outerHeight());
+
+
+                console.log("Move Up: " + moveUp);
+                console.log("Move Down: " + moveDown);
+                // let's move stuff
+                clicked.css('position', 'relative');
+                previousAll.css('position', 'relative');
+                clicked.animate({
+                    'top': -moveUp
+                });
+                previousAll.animate({
+                    'top': moveDown
+                }, {
+                    complete: function () {
+                        clicked.insertBefore(top);
+                        clicked.css({
+                            'position': 'static',
+                            'top': 0
+                        });
+                        previousAll.css({
+                            'position': 'static',
+                            'top': 0
+                        });
+                    }
+                });
+            }
+        }
+
+        /*end*/
     }
-}
+});
 
 //old stuff starts
 /*var substringMatcher = function (strs) {
diff --git a/static/styles.css b/static/styles.css
index 6b8b0ee..80a611a 100644
--- a/static/styles.css
+++ b/static/styles.css
@@ -1,3 +1,26 @@
+.no-gutter > [class*='col-'] {
+    padding-right:0;
+    padding-left:0;
+}
+li.active:after {
+        content: '\25BA';
+}
+
+span.downvote {
+    color: #FF8F8F;
+}
+
+span.upvote {
+    color: #87C583;
+}
+
+span.upvote:hover {
+    color: green;
+}
+
+span.downvote:hover {
+    color: red;
+}
 
 #url_form button.btn.btn-default {
     background: #36B120;
@@ -65,9 +88,7 @@ audio{
     list-style-type: none;
   cursor: pointer;
 }
-li.active:before {
-        content: '\25BA';
-}
+
 
 /*Lauren's*/
 .navbar-default {
diff --git a/templates/session.html b/templates/session.html
index e2ef00b..ee8c3a5 100644
--- a/templates/session.html
+++ b/templates/session.html
@@ -15,35 +15,48 @@
       </span>
             </div><!-- /input-group -->
         </form>
-    <div id="player"></div>
+        <div id="player"></div>
         <script>
-      // 2. This code loads the IFrame Player API code asynchronously.
-      var tag = document.createElement('script');
+            // 2. This code loads the IFrame Player API code asynchronously.
+            var tag = document.createElement('script');
 
-      tag.src = "https://www.youtube.com/iframe_api";
-      var firstScriptTag = document.getElementsByTagName('script')[0];
-      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
+            tag.src = "https://www.youtube.com/iframe_api";
+            var firstScriptTag = document.getElementsByTagName('script')[0];
+            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
 
-      // 3. This function creates an <iframe> (and YouTube player)
-      //    after the API code downloads.
+            // 3. This function creates an <iframe> (and YouTube player)
+            //    after the API code downloads.
 
-    </script>
-    <!--TODO take this out of the html file-->
+        </script>
+        <!--TODO take this out of the html file-->
     </div><!-- /.col-lg-8 -->
 
-        <div class="col-lg-4 session_info">
+    <div class="col-lg-4 session_info">
 
         <ul id="users">
-        <b>Users</b>
+            <b>Users</b>
             {% for user in users %}
-                    <li>{{ user.name }}</li>
+                <li>{{ user.name }}</li>
             {% endfor %}
         </ul>
-        <ul id="playables">
+
+        <ul id="playables" class="list-group">
             <b>Playables</b>
             {% for playable in playables %}
-                <li>{{ playable.url }}</li>
-                </a>
+                <li class="list-group-item" data-url="{{ playable.url }}">
+                        <span class="upvote">
+                            &#x25B2;
+                        </span>
+                        <span class="downvote">
+                            &#x25BC;
+                        </span>
+
+                    <span class="title">{{ playable.url }}</span>
+                    <span class="score label label-default label-pill pull-xs-right">{{ playable.score }}</span>
+
+
+                </li>
+
             {% endfor %}
         </ul>
 
